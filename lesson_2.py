# Урок 2. Циклы. Рекурсия. Функции.

# 1. Написать программу, которая будет складывать, вычитать, умножать или делить два числа. Числа и знак операции вводятся пользователем.
# После выполнения вычисления программа не должна завершаться, а должна запрашивать новые данные для вычислений. Завершение программы
# должно выполняться при вводе символа '0' в качестве знака операции. Если пользователь вводит неверный знак (не '0', '+', '-', '*', '/'), то
# программа должна сообщать ему об ошибке и снова запрашивать знак операции. Также сообщать пользователю о невозможности деления на ноль, если
# он ввел 0 в качестве делителя.
def calc(n1, n2, operation):
    if operation == '0':
        print('Программа завершена')
    else:
        if operation == '+':
            print(f'Сумма чисел равна {n1 + n2}')
            check_data()
        elif operation == '-':
            print(f'Разность чисел равна {n1 - n2}')
            check_data()
        elif operation == '*':
            print(f'Произведение чисел равно {n1 * n2}')
            check_data()
        elif operation == '/':
            print(f'Частное чисел равно {n1 / n2}')
            check_data()

def check_data():
    operation = input('ЗАДАНИЕ 1. Введите знак операции или 0 для завершения: ')
    if operation == '0':
        print('Программа завершена')
    elif operation == '+' or operation == '-' or operation == '*' or operation == '/':
        n1 = int(input('Введите первое число: '))
        n2 = int(input('Введите второе число: '))
        calc(n1, n2, operation)
    else:
        print('Вы ввели неверный знак')
        check_data()

check_data()

# 2. Посчитать четные и нечетные цифры введенного натурального числа. Например, если введено число 34560, то у него 3 четные цифры (4, 6 и 0)
# и 2 нечетные (3 и 5).
def count_num(data):
    if data.isdigit():
        data = list(data)
        count_1 = 0
        count_2 = 0
        for i in data:
            i = int(i)
            if i % 2 == 0:
                count_1 += 1
            else:
                count_2 += 1
        print(f'Количество четных цифр: {count_1}')
        print(f'Количество нечетных цифр: {count_2}')
    else:
        print('Вы ввели не число, попробуйте еще раз')
        count_num(input('ЗАДАНИЕ 2. Введите положительное число: '))

count_num(input('ЗАДАНИЕ 2. Введите положительное число: '))

# 3. Сформировать из введенного числа обратное по порядку входящих в него цифр и вывести на экран. Например, если введено число 3486,
# то надо вывести число 6843.
def reverse(data):
    if data.isdigit():
        data = list(data)
        data.reverse()
        data = int(''.join(map(str, data)))
        print(f'Обратное число {data}')
    else:
        print('Вы ввели не число, попробуйте еще раз')
        reverse(input('ЗАДАНИЕ 3. Введите положительное число: '))

reverse(input('ЗАДАНИЕ 3. Введите положительное число: '))

# 4. Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...Количество элементов (n) вводится с клавиатуры.
list = [1, -0.5, 0.25, -0.125]

def sum(data, list):
    result = 0
    if data.isdigit():
        if int(data) <= len(list):
            for i in list[0:int(data)]:
                result = result + i
            print(result)
        else:
            print(f'Введите значение не более чем {len(list)}')
            sum(input('ЗАДАНИЕ 4. Введите количество элементов: '), list)
    else:
        print('Вы ввели не число, попробуйте еще раз')
        sum(input('ЗАДАНИЕ 4. Введите количество элементов: '), list)

sum(input('ЗАДАНИЕ 4. Введите количество элементов: '), list)

# 5. Вывести на экран коды и символы таблицы ASCII, начиная с символа под номером 32 и заканчивая 127-м включительно.
# Вывод выполнить в табличной форме: по десять пар "код-символ" в каждой строке.
result = ''

for i in range(32,128):
    str = f'{i} - {chr(i)} '
    result += str
    if i % 10 == 0:
        result += '\n'

print(f'ЗАДАНИЕ 5.\n {result}')

# 6. В программе генерируется случайное целое число от 0 до 100. Пользователь должен его отгадать не более чем за 10 попыток.
# После каждой неудачной попытки должно сообщаться больше или меньше введенное пользователем число, чем то, что загадано.
# Если за 10 попыток число не отгадано, то вывести загаданное число.
import random

def game(num, user_input, count):
    while count > 0:
        if num == user_input:
            print('Вы угадали число')
            break
        else:
            print('Попробуйте еще раз')
            count -= 1
            num = random.randint(0, 100)
            try:
                user_input = int(input('ЗАДАНИЕ 6. Угадайте число от 1 до 100: '))
            except ValueError:
                print('Вы ввели не число')
    else:
        print('Вы исчерпали количество попыток')

num = random.randint(0, 100)

try:
    user_input = int(input('ЗАДАНИЕ 6. Угадайте число от 1 до 100: '))
except ValueError:
    print('Вы ввели не число')

game(num, user_input, 10)

# 7. Напишите программу, доказывающую или проверяющую, что для множества натуральных чисел выполняется равенство: 1+2+...+n = n(n+1)/2,
# где n - любое натуральное число.

def check_data(n):
    left = 0
    if n.isdigit():
        n = int(n)
        for i in range(1, n + 1):
            left = left + i
        right = n * (n + 1) / 2
        if left == right:
            print(f'{left} = {round(right)} Равенство выполняется')
        else:
            print('Проверьте формулу и попробуйте еще раз')
            check_data(input('ЗАДАНИЕ 7. Введите натуральное число: '))
    else:
        print('Вы ввесли не число попробуйте еще раз')
        check_data(input('ЗАДАНИЕ 7. Введите натуральное число: '))

check_data(input('ЗАДАНИЕ 7. Введите натуральное число: '))

#8. Посчитать, сколько раз встречается определенная цифра в введенной последовательности чисел. Количество вводимых чисел и цифра,
# которую необходимо посчитать, задаются вводом с клавиатуры.
import random
list = []
for i in range(10):
    list.append(random.randrange(2,5))

print(list)
n = int(input('ЗАДАНИЕ 8. Введите искоме число от 2 до 5: '))
count = 0

for i in list:
    if i == n:
        count += 1
print(f'Найдено {count} повторений')

# 9. Среди натуральных чисел, которые были введены, найти наибольшее по сумме цифр. Вывести на экран это число и сумму его цифр.
user_input = input('ЗАДАНИЕ 9. Введите натуральные трехзначные числа через пробел: ').split()
print(user_input)

def get_sum(num):
    result = 0
    list = []
    for i in num:
        i = int(i)
        result += i
    list.append(result)
    max_num = list[0]
    for j in list:
        if j > max_num:
            max_num = j
    return max_num

result_list = []

for i in user_input:
    result_list.append(get_sum(i))

max_ = result_list[0]
max_num = 0

for y in result_list:
    if y > max_num:
        max_num = y

print(f'Сумма максимального числа {max_num}')